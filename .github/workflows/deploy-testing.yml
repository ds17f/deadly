name: Deploy to Testing

on:
  push:
    tags:
      - 'v*'
      - '!production-v*'  # Exclude production tags

permissions:
  contents: write

jobs:
  deploy-ios-testflight:
    name: Deploy iOS to TestFlight
    runs-on: macos-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

    - name: Set up JDK 17
      uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Install fastlane
      run: brew install fastlane

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode App Store Connect API key
      run: |
        mkdir -p .secrets
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > .secrets/AuthKey_V862XWV7WB.p8

    - name: Decode certificate
      run: |
        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 -d > .secrets/DeadlyApp_AppStore2.p12

    - name: Decode and install provisioning profile
      run: |
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 -d > DeadlyApp_AppStore2.mobileprovision

        # Verify the profile was decoded correctly
        if [ ! -s DeadlyApp_AppStore2.mobileprovision ]; then
          echo "‚ùå Error: Provisioning profile is empty or missing"
          exit 1
        fi

        echo "‚úÖ Provisioning profile size: $(wc -c < DeadlyApp_AppStore2.mobileprovision) bytes"

        # Extract UUID from the profile
        PROFILE_UUID=$(security cms -D -i DeadlyApp_AppStore2.mobileprovision | /usr/libexec/PlistBuddy -c "Print :UUID" /dev/stdin)
        echo "‚úÖ Provisioning profile UUID: $PROFILE_UUID"

        # Install to the correct location with UUID-based filename
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp DeadlyApp_AppStore2.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${PROFILE_UUID}.mobileprovision

        echo "‚úÖ Provisioning profile installed to ~/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"

    - name: Import certificate to keychain
      env:
        CERT_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        security create-keychain -p "$CERT_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$CERT_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        security import .secrets/DeadlyApp_AppStore2.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "$CERT_PASSWORD" build.keychain

    - name: Deploy to TestFlight
      run: make deploy-testing-ios

    - name: Clean up
      if: always()
      run: |
        rm -f .secrets/AuthKey_V862XWV7WB.p8
        rm -f .secrets/DeadlyApp_AppStore2.p12
        rm -f DeadlyApp_AppStore2.mobileprovision
        security delete-keychain build.keychain || true

  deploy-android-internal:
    name: Deploy Android to Play Store Internal
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

    - name: Set up JDK 17
      uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Set up Ruby for Fastlane
      uses: ruby/setup-ruby@a6e6f86333f0a2523ece813039b8b4be04560854 # v1.190.0
      with:
        ruby-version: '3.1'

    - name: Install Fastlane
      run: gem install fastlane

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode keystore
      run: |
        mkdir -p .secrets
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > .secrets/my-release-key.jks

    - name: Create keystore.properties
      run: |
        cat > .secrets/keystore.properties << EOF
        storeFile=.secrets/my-release-key.jks
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        EOF

    - name: Decode Play Store service account key
      run: |
        echo "${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}" | base64 -d > .secrets/thedeadly-app-f48493c2a133.json

    - name: Deploy to Play Store Internal Testing
      run: make deploy-testing-android

    - name: Clean up keystore
      if: always()
      run: rm -f .secrets/my-release-key.jks .secrets/keystore.properties .secrets/thedeadly-app-f48493c2a133.json

  create-prerelease:
    name: Create GitHub Pre-Release
    needs: [deploy-ios-testflight, deploy-android-internal]
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Testing release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Pre-Release
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      with:
        name: "Deadly v${{ steps.get_version.outputs.VERSION }} (Testing)"
        body: |
          ## üíÄ Deadly v${{ steps.get_version.outputs.VERSION }} - Testing Release

          **Status:** Deployed to TestFlight and Play Store Internal Testing

          ### üì¶ Testing Availability
          - **iOS:** Available on TestFlight for internal testers
          - **Android:** Available on Play Store Internal Testing track

          ### üìù Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ### üöÄ Next Steps
          1. Test the build on both platforms
          2. Verify all features work as expected
          3. When ready for production, create a `production-v${{ steps.get_version.outputs.VERSION }}` tag
        prerelease: true
        draft: false
