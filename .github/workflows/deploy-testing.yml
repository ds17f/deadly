name: Deploy to Testing

on:
  push:
    tags:
      - 'v*'
      - '!production-v*'  # Exclude production tags

permissions:
  contents: write

jobs:
  # iOS deployment - Self-hosted runner
  deploy-ios-testflight-self-hosted:
    name: Deploy iOS (Self-Hosted)
    uses: ./.github/workflows/deploy-ios-testflight-reusable.yml
    with:
      runner-type: '["self-hosted", "macOS", "ARM64"]'
    secrets:
      APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
    continue-on-error: true

  # iOS deployment - GitHub-hosted fallback
  deploy-ios-testflight-github-hosted:
    name: Deploy iOS (GitHub-Hosted Fallback)
    needs: deploy-ios-testflight-self-hosted
    if: |
      always() &&
      (needs.deploy-ios-testflight-self-hosted.result == 'failure' ||
       needs.deploy-ios-testflight-self-hosted.result == 'cancelled' ||
       needs.deploy-ios-testflight-self-hosted.outputs.success != 'true')
    uses: ./.github/workflows/deploy-ios-testflight-reusable.yml
    with:
      runner-type: 'macos-latest'
    secrets:
      APP_STORE_CONNECT_API_KEY: ${{ secrets.APP_STORE_CONNECT_API_KEY }}
      APPLE_CERTIFICATE_P12: ${{ secrets.APPLE_CERTIFICATE_P12 }}
      APPLE_PROVISIONING_PROFILE: ${{ secrets.APPLE_PROVISIONING_PROFILE }}
      APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

  # Android deployment - Self-hosted runner
  deploy-android-internal-self-hosted:
    name: Deploy Android (Self-Hosted)
    uses: ./.github/workflows/deploy-android-playstore-reusable.yml
    with:
      runner-type: '["self-hosted", "macOS", "ARM64"]'
    secrets:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      PLAY_STORE_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}
    continue-on-error: true

  # Android deployment - GitHub-hosted fallback
  deploy-android-internal-github-hosted:
    name: Deploy Android (GitHub-Hosted Fallback)
    needs: deploy-android-internal-self-hosted
    if: |
      always() &&
      (needs.deploy-android-internal-self-hosted.result == 'failure' ||
       needs.deploy-android-internal-self-hosted.result == 'cancelled' ||
       needs.deploy-android-internal-self-hosted.outputs.success != 'true')
    uses: ./.github/workflows/deploy-android-playstore-reusable.yml
    with:
      runner-type: 'ubuntu-latest'
    secrets:
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASSWORD: ${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
      ANDROID_KEY_ALIAS: ${{ secrets.ANDROID_KEY_ALIAS }}
      ANDROID_KEY_PASSWORD: ${{ secrets.ANDROID_KEY_PASSWORD }}
      PLAY_STORE_SERVICE_ACCOUNT_JSON: ${{ secrets.PLAY_STORE_SERVICE_ACCOUNT_JSON }}

  # Create GitHub Pre-Release
  create-prerelease:
    name: Create GitHub Pre-Release
    needs: [deploy-ios-testflight-self-hosted, deploy-ios-testflight-github-hosted, deploy-android-internal-self-hosted, deploy-android-internal-github-hosted]
    if: |
      always() &&
      (needs.deploy-ios-testflight-self-hosted.outputs.success == 'true' || needs.deploy-ios-testflight-github-hosted.result == 'success') &&
      (needs.deploy-android-internal-self-hosted.outputs.success == 'true' || needs.deploy-android-internal-github-hosted.result == 'success')
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Extract changelog for this version
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        if [ -f CHANGELOG.md ]; then
          CHANGELOG=$(awk "/## \[${VERSION}\]/{flag=1; next} /## \[/{flag=0} flag" CHANGELOG.md)
          echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "CHANGELOG=Testing release $VERSION" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Pre-Release
      uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191 # v2.0.8
      with:
        name: "Deadly v${{ steps.get_version.outputs.VERSION }} (Testing)"
        body: |
          ## üíÄ Deadly v${{ steps.get_version.outputs.VERSION }} - Testing Release

          **Status:** Deployed to TestFlight and Play Store Internal Testing

          ### üì¶ Testing Availability
          - **iOS:** Available on TestFlight for internal testers
          - **Android:** Available on Play Store Internal Testing track

          ### üìù Changes

          ${{ steps.changelog.outputs.CHANGELOG }}

          ### üöÄ Next Steps
          1. Test the build on both platforms
          2. Verify all features work as expected
          3. When ready for production, create a `production-v${{ steps.get_version.outputs.VERSION }}` tag
        prerelease: true
        draft: false
