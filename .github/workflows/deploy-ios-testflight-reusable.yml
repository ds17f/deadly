name: Deploy iOS to TestFlight (Reusable)

on:
  workflow_call:
    inputs:
      runner-type:
        description: 'Type of runner for identification'
        required: true
        type: string
    secrets:
      APP_STORE_CONNECT_API_KEY:
        required: true
      APPLE_CERTIFICATE_P12:
        required: true
      APPLE_PROVISIONING_PROFILE:
        required: true
      APPLE_CERTIFICATE_PASSWORD:
        required: true
    outputs:
      success:
        description: 'Whether the deployment succeeded'
        value: ${{ jobs.deploy.outputs.success }}

jobs:
  deploy:
    name: Deploy iOS to TestFlight (${{ inputs.runner-type }})
    runs-on: ${{ inputs.runner-type }}
    outputs:
      success: ${{ steps.mark-success.outputs.success }}

    steps:
    - name: Checkout code
      uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4.2.1

    - name: Set up JDK 17
      uses: actions/setup-java@b36c23c0d998641eff861008f374ee103c25ac73 # v4.4.0
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle

    - name: Install fastlane
      run: brew install fastlane

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Decode App Store Connect API key
      run: |
        mkdir -p .secrets
        echo "${{ secrets.APP_STORE_CONNECT_API_KEY }}" | base64 -d > .secrets/AuthKey_V862XWV7WB.p8

    - name: Decode certificate
      run: |
        echo "${{ secrets.APPLE_CERTIFICATE_P12 }}" | base64 -d > .secrets/DeadlyApp_AppStore2.p12

    - name: Decode and install provisioning profile
      run: |
        echo "${{ secrets.APPLE_PROVISIONING_PROFILE }}" | base64 -d > DeadlyApp_AppStore2.mobileprovision

        # Verify the profile was decoded correctly
        if [ ! -s DeadlyApp_AppStore2.mobileprovision ]; then
          echo "❌ Error: Provisioning profile is empty or missing"
          exit 1
        fi

        echo "✅ Provisioning profile size: $(wc -c < DeadlyApp_AppStore2.mobileprovision) bytes"

        # Extract UUID from the profile
        security cms -D -i DeadlyApp_AppStore2.mobileprovision -o profile.plist
        PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" profile.plist)
        echo "✅ Provisioning profile UUID: $PROFILE_UUID"

        # Install to the correct location with UUID-based filename
        mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
        cp DeadlyApp_AppStore2.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${PROFILE_UUID}.mobileprovision

        echo "✅ Provisioning profile installed to ~/Library/MobileDevice/Provisioning Profiles/${PROFILE_UUID}.mobileprovision"

        # Clean up temp file
        rm -f profile.plist

    - name: Import certificate to keychain
      env:
        CERT_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
      run: |
        security create-keychain -p "$CERT_PASSWORD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$CERT_PASSWORD" build.keychain
        security set-keychain-settings -t 3600 -u build.keychain
        security import .secrets/DeadlyApp_AppStore2.p12 -k build.keychain -P "$CERT_PASSWORD" -T /usr/bin/codesign
        security set-key-partition-list -S apple-tool:,apple: -s -k "$CERT_PASSWORD" build.keychain

    - name: Deploy to TestFlight
      run: make deploy-testing-ios

    - name: Clean up
      if: always()
      run: |
        rm -f .secrets/AuthKey_V862XWV7WB.p8
        rm -f .secrets/DeadlyApp_AppStore2.p12
        rm -f DeadlyApp_AppStore2.mobileprovision
        security delete-keychain build.keychain || true

    - name: Mark success
      id: mark-success
      if: success()
      run: echo "success=true" >> $GITHUB_OUTPUT
