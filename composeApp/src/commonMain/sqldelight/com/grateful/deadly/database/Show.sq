-- SQLDelight schema for Show table
-- Based on V2 ShowEntity - exact same structure for proven performance

-- Main shows table (denormalized for fast search - V2 pattern)
CREATE TABLE Show (
    showId TEXT PRIMARY KEY NOT NULL,

    -- Date components for flexible searching (V2 pattern)
    date TEXT NOT NULL,                    -- "1977-05-08"
    year INTEGER NOT NULL,                 -- 1977
    month INTEGER NOT NULL,                -- 5
    yearMonth TEXT NOT NULL,               -- "1977-05"

    -- Show metadata
    band TEXT NOT NULL,                    -- "Grateful Dead"
    url TEXT,                              -- Jerry Garcia URL

    -- Venue data (denormalized for fast search - V2 pattern)
    venueName TEXT NOT NULL,               -- "Barton Hall, Cornell University"
    city TEXT,                             -- "Ithaca"
    state TEXT,                            -- "NY"
    country TEXT NOT NULL DEFAULT 'USA',
    locationRaw TEXT,                      -- "Ithaca, NY"

    -- Setlist data (JSON strings - V2 pattern)
    setlistStatus TEXT,                    -- "found", "not_found"
    setlistRaw TEXT,                       -- JSON string for UI display
    songList TEXT,                         -- "Scarlet Begonias,Fire on the Mountain" (comma-separated for search)

    -- Lineup data (JSON strings - V2 pattern)
    lineupStatus TEXT,                     -- "found", "missing"
    lineupRaw TEXT,                        -- JSON string for UI display
    memberList TEXT,                       -- "Jerry Garcia,Bob Weir,Phil Lesh" (comma-separated for search)

    -- Multiple shows same date/venue (rare but happens)
    showSequence INTEGER NOT NULL DEFAULT 1,

    -- Recording data
    recordingsRaw TEXT,                        -- JSON array string of recording IDs ["rec1", "rec2"]
    recordingCount INTEGER NOT NULL DEFAULT 0,
    bestRecordingId TEXT,
    averageRating REAL,
    totalReviews INTEGER NOT NULL DEFAULT 0,

    -- Library status (for future V2 features)
    isInLibrary INTEGER NOT NULL DEFAULT 0,
    libraryAddedAt INTEGER,

    -- Timestamps
    createdAt INTEGER NOT NULL,
    updatedAt INTEGER NOT NULL
);

-- Indexes for fast search (based on V2 ShowEntity indexes)
CREATE INDEX idx_shows_date ON Show(date);
CREATE INDEX idx_shows_year ON Show(year);
CREATE INDEX idx_shows_yearMonth ON Show(yearMonth);
CREATE INDEX idx_shows_venueName ON Show(venueName);
CREATE INDEX idx_shows_city ON Show(city);
CREATE INDEX idx_shows_state ON Show(state);

-- Basic queries
selectAllShows:
SELECT * FROM Show ORDER BY date DESC;

selectShowById:
SELECT * FROM Show WHERE showId = ?;

getShowCount:
SELECT COUNT(*) FROM Show;

-- Search query (simplified version of V2 complex search)
searchShows:
SELECT * FROM Show
WHERE date LIKE '%' || ? || '%'
   OR venueName LIKE '%' || ? || '%'
   OR city LIKE '%' || ? || '%'
   OR state LIKE '%' || ? || '%'
   OR songList LIKE '%' || ? || '%'
   OR memberList LIKE '%' || ? || '%'
ORDER BY
  CASE
    WHEN venueName LIKE ? || '%' THEN 1
    WHEN city LIKE ? || '%' THEN 2
    WHEN date LIKE ? || '%' THEN 3
    ELSE 4
  END,
  averageRating DESC,
  date DESC;

-- Get shows for specific month and day across all years (for "Today in History")
getShowsForDate:
SELECT * FROM Show
WHERE month = ? AND CAST(SUBSTR(date, 9, 2) AS INTEGER) = ?
ORDER BY year ASC;

-- Flexible show query with optional filters
getShows:
SELECT * FROM Show
WHERE (:year IS NULL OR year = :year)
  AND (:startYear IS NULL OR year >= :startYear)
  AND (:endYear IS NULL OR year <= :endYear)
  AND (:yearMonth IS NULL OR yearMonth = :yearMonth)
  AND (:startDate IS NULL OR date >= :startDate)
  AND (:endDate IS NULL OR date <= :endDate)
  AND (:venueName IS NULL OR venueName LIKE '%' || :venueName || '%')
  AND (:city IS NULL OR city LIKE '%' || :city || '%')
  AND (:state IS NULL OR state = :state)
  AND (:hasSetlist IS NULL OR (CASE WHEN :hasSetlist = 1 THEN setlistStatus = 'found' AND setlistRaw IS NOT NULL ELSE 1 END))
  AND (:songName IS NULL OR songList LIKE '%' || :songName || '%')
  AND (:hasLineup IS NULL OR (CASE WHEN :hasLineup = 1 THEN lineupStatus = 'found' AND lineupRaw IS NOT NULL ELSE 1 END))
  AND (:memberName IS NULL OR memberList LIKE '%' || :memberName || '%')
  AND (:hasRecordings IS NULL OR (CASE WHEN :hasRecordings = 1 THEN recordingCount > 0 ELSE 1 END))
  AND (:minRating IS NULL OR averageRating >= :minRating)
  AND (:minReviews IS NULL OR totalReviews >= :minReviews)
  AND (:isInLibrary IS NULL OR isInLibrary = :isInLibrary)
ORDER BY
  CASE WHEN :orderBy = 'rating' THEN averageRating END DESC,
  CASE WHEN :orderBy = 'library' THEN libraryAddedAt END DESC,
  date DESC
LIMIT CASE WHEN :limit IS NULL THEN -1 ELSE :limit END;

-- Statistical queries
getShowCountByYear:
SELECT year, COUNT(*) AS count
FROM Show
GROUP BY year
ORDER BY year;

getShowCountByVenue:
SELECT venueName, COUNT(*) AS count
FROM Show
GROUP BY venueName
ORDER BY count DESC;

getAverageRatingStats:
SELECT
    COUNT(*) AS totalShows,
    COUNT(averageRating) AS ratedShows,
    AVG(averageRating) AS avgRating,
    MIN(averageRating) AS minRating,
    MAX(averageRating) AS maxRating
FROM Show;

-- Data management queries
insertShow:
INSERT OR REPLACE INTO Show (
    showId, date, year, month, yearMonth, band, url,
    venueName, city, state, country, locationRaw,
    setlistStatus, setlistRaw, songList,
    lineupStatus, lineupRaw, memberList,
    showSequence, recordingsRaw, recordingCount, bestRecordingId, averageRating, totalReviews,
    isInLibrary, libraryAddedAt, createdAt, updatedAt
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?);

updateShowLibraryStatus:
UPDATE Show
SET isInLibrary = ?, libraryAddedAt = ?, updatedAt = ?
WHERE showId = ?;

deleteAllShows:
DELETE FROM Show;